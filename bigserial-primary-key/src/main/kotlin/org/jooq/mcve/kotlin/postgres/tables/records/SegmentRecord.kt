/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.postgres.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.postgres.tables.Segment


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SegmentRecord() : UpdatableRecordImpl<SegmentRecord>(Segment.SEGMENT), Record5<Long?, Int?, Int?, Float?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var start: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var finish: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var value: Float?
        set(value): Unit = set(3, value)
        get(): Float? = get(3) as Float?

    open var code: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Int?, Int?, Float?, String?> = super.fieldsRow() as Row5<Long?, Int?, Int?, Float?, String?>
    override fun valuesRow(): Row5<Long?, Int?, Int?, Float?, String?> = super.valuesRow() as Row5<Long?, Int?, Int?, Float?, String?>
    override fun field1(): Field<Long?> = Segment.SEGMENT.ID
    override fun field2(): Field<Int?> = Segment.SEGMENT.START
    override fun field3(): Field<Int?> = Segment.SEGMENT.FINISH
    override fun field4(): Field<Float?> = Segment.SEGMENT.VALUE
    override fun field5(): Field<String?> = Segment.SEGMENT.CODE
    override fun component1(): Long? = id
    override fun component2(): Int? = start
    override fun component3(): Int? = finish
    override fun component4(): Float? = value
    override fun component5(): String? = code
    override fun value1(): Long? = id
    override fun value2(): Int? = start
    override fun value3(): Int? = finish
    override fun value4(): Float? = value
    override fun value5(): String? = code

    override fun value1(value: Long?): SegmentRecord {
        this.id = value
        return this
    }

    override fun value2(value: Int?): SegmentRecord {
        this.start = value
        return this
    }

    override fun value3(value: Int?): SegmentRecord {
        this.finish = value
        return this
    }

    override fun value4(value: Float?): SegmentRecord {
        this.value = value
        return this
    }

    override fun value5(value: String?): SegmentRecord {
        this.code = value
        return this
    }

    override fun values(value1: Long?, value2: Int?, value3: Int?, value4: Float?, value5: String?): SegmentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised SegmentRecord
     */
    constructor(id: Long? = null, start: Int? = null, finish: Int? = null, value: Float? = null, code: String? = null): this() {
        this.id = id
        this.start = start
        this.finish = finish
        this.value = value
        this.code = code
    }
}
